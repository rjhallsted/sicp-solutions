(load "constraints.scm")

(define (c+ x y)
    (let ((z (make-connector)))
        (adder x y z)
        z))

(define (c* m1 m2)
    (let ((p (make-connector)))
        (multiplier m1 m2 p)
        p))

(define (divider n d result)
    (define (process-new-value)
        (cond ((and (has-value? d) (= (get-value d) 0))
                (error "Division by zero: DIVIDER"))
            ((and (has-value? n) (has-value? d))
                (set-value! result
                            (/ (get-value n) (get-value d))
                            me))
            ((and (has-value? result) (has-value? n))
                (set-value! d
                            (/ (get-value n) (get-value result))
                            me))
            ((and (has-value? result) (has-value? d))
                (set-value! n
                            (* (get-value result) (get-value d))
                            me))))
    (define (process-forget-value)
        (forget-value! product me)
        (forget-value! m1 me)
        (forget-value! m2 me)
        (process-new-value))
    (define (me request)
        (cond ((eq? request 'I-have-a-value) (process-new-value))
            ((eq? request 'I-lost-my-value) (process-forget-value))
            (else (error "Unknown request: MULTIPLIER" request))))
    (connect n me)
    (connect d me)
    (connect result me)
    me)
    
(define (c/ n d)
    (let ((result (make-connector)))
        (divider n d result)
        result))

(define (cv v)
    (let ((c (make-connector)))
        (constant v c)
        c))

(define (celsius-fahrenheit-converter x)
    (c+ (c* (c/ (cv 9) (cv 5))
            x)
        (cv 32)))
(define C (make-connector))
(define F (celsius-fahrenheit-converter C))

(probe "Celsius" C)
(probe "Fahrenheit" F)

(set-value! C 100 'user)
(forget-value! C 'user)
(set-value! F 212 'user)
