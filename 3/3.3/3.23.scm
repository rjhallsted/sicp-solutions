;; (define (front-ptr queue) (car queue))
;; (define (rear-ptr queue) (cdr queue))
;; (define (set-front-ptr! queue item)
;;     (set-car! queue item))
;; (define (set-rear-ptr! queue item)
;;     (set-cdr! queue item))

;; (define (empty-queue? queue)
;;     (null? (front-ptr queue)))

;; (define (make-queue) (cons '() '()))

;; (define (front-queue queue)
;;     (if (empty-queue? queue)
;;         (error "FRONT called with an empty queue" queue)
;;         (car (front-ptr queue))))
    
;; (define (insert-queue! queue item)
;;     (let ((new-pair (cons item '())))
;;         (cond ((empty-queue? queue)
;;                 (set-front-ptr! queue new-pair)
;;                 (set-rear-ptr! queue new-pair)
;;                 queue)
;;             (else
;;                 (set-cdr! (rear-ptr queue) new-pair)
;;                 (set-rear-ptr! queue new-pair)
;;                 queue))))

;; (define (delete-queue! queue)
;;     (cond ((empty-queue? queue)
;;             (error "DELETE! called with an empty queue" queue))
;;         (else
;;             (set-front-ptr! queue (cdr (front-ptr queue)))
;;             queue)))

;;;;;;;;;;;;;;


;;redo this with a doubly linked list....
(define (make-node value prev next)
    (cons value (cons prev next)))
(define (value node)
    (car node))
(define (prev-node node)
    (cadr node))
(define (next-node node)
    (cddr node))
(define (set-prev-node! node prev)
    (set-car! (cdr node) prev))
(define (set-next-node! node next)
    (set-cdr! (cdr node) next))

(define (make-dequeue) (cons '() '()))
(define (front-ptr dequeue) (car dequeue))
(define (rear-ptr dequeue) (cdr dequeue))
(define (set-front-ptr! dequeue node)
    (set-car! dequeue node))
(define (set-rear-ptr! dequeue node)
    (set-cdr! dequeue node))

(define (empty-dequeue? dequeue)
    (null? (front-ptr dequeue)))

(define (front-dequeue dequeue)
    (if (empty-dequeue? dequeue)
        (error "FRONT called with an empty dequeue" dequeue)
        (value (front-ptr dequeue))))
(define (rear-dequeue dequeue)
    (if (empty-dequeue? dequeue)
        (error "REAR called with an empty dequeue" dequeue)
        (value (rear-ptr dequeue))))

(define (front-insert-dequeue! dequeue value)
    (if (empty-dequeue? dequeue)
        (let ((new-node (make-node value '() '())))
            (set-front-ptr! dequeue new-node)
            (set-rear-ptr! dequeue new-node)
            dequeue)
        (let ((new-node (make-node value '() (front-ptr dequeue))))
            (set-prev-node! (front-ptr dequeue) new-node)
            (set-front-ptr! dequeue new-node)
            dequeue)))
(define (rear-insert-dequeue! dequeue value)
    (if (empty-dequeue? dequeue)
        (let ((new-node (make-node value '() '())))
            (set-front-ptr! dequeue new-node)
            (set-rear-ptr! dequeue new-node)
            dequeue)
        (let ((new-node (make-node value (rear-ptr dequeue) '())))
            (set-next-node! (rear-ptr dequeue) new-node)
            (set-rear-ptr! dequeue new-node)
            dequeue)))

(define (front-delete-dequeue! dequeue)
    (if (empty-dequeue? dequeue)
        (error "FRONT-DELETE! called with an empty dequeue" dequeue)
        (begin (set-front-ptr! dequeue (next-node (front-ptr dequeue)))
               (if (not (null? (front-ptr dequeue)))
                   (set-prev-node! (front-ptr dequeue) '())
                   (set-rear-ptr! dequeue '()))
               dequeue)))
(define (rear-delete-dequeue! dequeue)
    (if (empty-dequeue? dequeue)
        (error "REAR-DELETE! called with an empty dequeue" dequeue)
        (begin (set-rear-ptr! dequeue (prev-node (rear-ptr dequeue)))
               (if (not (null? (rear-ptr dequeue)))
                   (set-next-node! (rear-ptr dequeue) '())
                   (set-front-ptr! dequeue '()))
               dequeue))))

(define (display-dequeue dequeue)
    (define (dd-inner node)
        (if (not (null? node))
            (begin
                (display " ")
                (display (value node))
                (dd-inner (next-node node)))))
    (display "(")
    (if (not (empty-dequeue? dequeue))
        (begin (display (front-dequeue dequeue))
               (dd-inner (next-node (front-ptr dequeue)))))
    (display ")"))

(define q1 (make-dequeue))
(rear-insert-dequeue! q1 'a)
(rear-insert-dequeue! q1 'b)
(rear-insert-dequeue! q1 'c)
(display-dequeue q1) (newline)
(front-insert-dequeue! q1 'd)
(display-dequeue q1) (newline)
(rear-delete-dequeue! q1)
(display-dequeue q1) (newline)
(rear-delete-dequeue! q1)
(display-dequeue q1) (newline)
(rear-delete-dequeue! q1)
(display-dequeue q1) (newline)
(rear-delete-dequeue! q1)
(display-dequeue q1) (newline)
(front-insert-dequeue! q1 'e)
(front-insert-dequeue! q1 'f)
(front-insert-dequeue! q1 'g)
(front-insert-dequeue! q1 'h)
(display-dequeue q1) (newline)
(rear-delete-dequeue! q1)
(display-dequeue q1) (newline)
(front-delete-dequeue! q1)
(display-dequeue q1) (newline)
(front-delete-dequeue! q1)
(display-dequeue q1) (newline)
(front-delete-dequeue! q1)
(display-dequeue q1) (newline)