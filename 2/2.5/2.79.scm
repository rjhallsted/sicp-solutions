(define (install-equ?)
    (define (rational-equ? a b)
        (and (= (numer a) (numer b))
             (= (denom a) (denom b))))
    (define (complex-equ? a b)
        (and (equ? (real-part a) (real-part b))
             (equ? (imag-part a) (imag-part b))))
    (define (convert-rational-to-scheme x)
        (/ (numer x)
           (denom x)))
    (define (rational-scheme-equ? a b)
        (= (convert-rational-to-scheme a))
                   b))
    (define (scheme-rational-equ? a b)
        (rational-scheme-equ? b a))
    (define (complex-other-equ? a b)
        (if (not (equ? (imag-part? a) 0))
            #f
            (equ? (real-part a) b)))
    (define (other-complex-equ? a b)
        (complex-other-equ? b a))
    (put 'equ '(scheme-number scheme-number) =)
    (put 'equ '(rational rational) rational-equ?)
    (put 'equ '(complex complex) complex-equ?)
    (put 'equ '(rational scheme-number) rational-scheme-equ?)
    (put 'equ '(scheme-number rational) scheme-rational-equ?)
    (put 'equ '(complex scheme-number) complex-other-equ?)
    (put 'equ '(complex rational) complex-other-equ?)
    (put 'equ '(scheme-number complex) other-complex-equ?)
    (put 'equ '(rational complex) other-complex-equ?)
    'done)