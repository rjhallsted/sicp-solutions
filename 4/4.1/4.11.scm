
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values)
    (if (null? variables)
        '()
        (cons (make-binding (car variables) (car values))
              (make-frame (cdr variables) (cdr values)))))
(define (make-binding var val) (cons var val))
(define (binding-var binding) (car binding))
(define (binding-val binding) (cdr binding))
(define (first-binding frame) (car frame))
(define (rest-bindings frame) (cdr frame))
;; (define (frame-variables frame) (car frame))
;; (define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
    (set-car! frame (cons (make-binding var val)
                          frame)))
(define (extend-environment vars vals base-env)
    (if (= (length vars) (length vals))
        (cons (make-frame vars vals) base-env)
        (if (< (length vars) (length vals))
            (error "Too many arguments supplied" vars vals)
            (error "Too few arguments supplied" vars vals))))

(define (lookup-variable-value var env)
    (define (env-loop env)
        (define (scan frame)
            (cond ((null? frame)
                    (env-loop (enclosing-environment env)))
                ((eq? var (binding-var (first-binding frame)))
                    (binding-val (first-binding frame)))
                (else (scan (rest-bindings frame)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable" var)
            (scan (first-frame env))))
    (env-loop env))

(define (set-variable-value! var val env)
    (define (env-loop env)
        (define (scan frame)
            (cond ((null? frame)
                    (env-loop (enclosing-environment env)))
                ((eq? var (binding-var (first-binding frame)))
                    (set-cdr! (first-binding frame) val))
                (else (scan (rest-bindings frame)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable: SET" var)
            (scan (first-frame env))))
    (env-loop env))

(define (define-variable! var val env)
    (define (scan frame)
        (cond ((null? frame)
                (add-binding-to-frame! var val frame))
            ((eq? var (binding-var (first-binding frame)))
                (set-cdr! (first-binding frame) val))
            (else (scan (rest-bindings frame)))))
    (scan (first-frame env)))