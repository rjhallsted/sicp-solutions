(load "../list-ops.scm")
(load "../proc-tables.scm")
(load "generic-arithmetic.scm")

(define (install-sparce-polynomials)
    (define (make-term-list term-list)
        term-list)
    (define (adjoin-term term term-list)
        (if (=zero? (coeff term))
            term-list
            (cons (make-term (order term) (coeff term))
                  term-list)))
    (define (empty-termlist? p)
        (null? p))
    (define (first-term term-list) (car term-list))
    (define (rest-terms term-list) (cdr term-list))
    (define (the-empty-termlist)
        ((get 'the-empty-termlist 'sparse)))
    ;;interface
    (define (tag x) (attach-tag 'sparse x))
    (define (coeff x) ((get 'coeff '(term)) x))
    (define (order x) ((get 'order '(term)) x))
    (put 'adjoin-term '(term sparse) (lambda (t tl) (tag (adjoin-term t tl))))
    (put 'first-term '(sparse) first-term)
    (put 'rest-terms '(sparse) (lambda (p) (tag (rest-terms p))))
    (put 'make 'sparse (lambda (x) (tag (make-term-list x))))
    (put 'empty-termlist? '(sparse) empty-termlist?)
    (put 'the-empty-termlist 'sparse (lambda () (tag '())))
    'done)

(define (install-dense-polynomials)
    (define (make-term-list terms)
        (if (null? terms)
            (the-empty-termlist)
            (adjoin-term (car terms)
                        (make-term-list (cdr terms)))))
    (define (adjoin-the-terms term term-list)
        (define (append-zeroes term next-item-order term-list)
            (append (list (coeff term))
                    (map (lambda (x) 0) (enumerate-interval (+ next-item-order 1) (- (order term) 1)))
                    term-list))
        (if (=zero? (coeff term))
            term-list
            (if (empty-termlist? term-list)
                (append-zeroes term 0 (contents (the-empty-termlist)))
                (append-zeroes term (order (first-term term-list)) term-list))))
    (define (empty-termlist? p)
        (or (null? p) (empty-dense-list? p)))
    (define (empty-dense-list? l)
        (and (same-variable? 'dense (car l))
             (null? (cdr l))))
    (define (first-term term-list)
        (contents (interface-first-term term-list)))
    (define (rest-terms term-list) (cdr term-list))
    (define (the-empty-termlist)
        ((get 'the-empty-termlist 'dense)))
    (define (adjoin-term term term-list)
        (apply-generic 'adjoin-term term term-list))
    ;;interface
    (define (interface-first-term term-list)
        (make-term (- (length term-list) 1) (car term-list)))
    (define (coeff term)
        ((get 'coeff '(term)) term))
    (define (order term)
        ((get 'order '(term)) term))
    (define (tag x) (attach-tag 'dense x))
    (put 'adjoin-term '(term dense) (lambda (t tl) (tag (adjoin-the-terms t tl))))
    (put 'first-term '(dense) interface-first-term)
    (put 'rest-terms '(dense) (lambda (p) (tag (rest-terms p))))
    (put 'make 'dense make-term-list)
    (put 'empty-termlist? '(dense) empty-termlist?)
    (put 'the-empty-termlist 'dense (lambda () (tag '())))
    'done)

(define (install-polynomial-package)
    (define (make-poly variable term-list)
        (cons variable term-list))
    (define (variable p) (car p))
    (define (term-list p) (cdr p))
    (define (coerce-to-type p term-type)
        (cond ((same-variable? (type-tag p) term-type)
                p)
            ((empty-termlist? p)
                (the-empty-termlist term-type))
            (else
                (let ((first (first-term p)))
                    (adjoin-term (make-term (order first) (coeff first))
                                 (coerce-to-type (rest-terms p)
                                                 term-type))))))
    (define (add-poly p1 p2)
        (if (same-variable? (variable p1) (variable p2))
            (make-poly (variable p1)
                       (add-terms (term-list p1)
                                  (coerce-to-type (term-list p2)
                                                  (type-tag (term-list p1)))))
            (error "Polys not in same var: ADD-POLY" 
                    (list p1 p2))))
    (define (add-terms L1 L2)
        (cond ((empty-termlist? L1) L2)
            ((empty-termlist? L2) L1)
            (else
                (let ((t1 (first-term L1))
                      (t2 (first-term L2)))
                    (cond ((> (order t1) (order t2))
                            (adjoin-term t1
                                        (add-terms (rest-terms L1) L2)))
                        ((< (order t1) (order t2))
                            (adjoin-term t2
                                        (add-terms L1 (rest-terms L2))))
                        (else
                            (adjoin-term
                                (make-term (order t1)
                                           (add (coeff t1) (coeff t2)))
                                (add-terms (rest-terms L1) (rest-terms L2)))))))))
    (define (mul-poly p1 p2)
        (if (same-variable? (variable p1) (variable p2))
            (make-poly (variable p1)
                       (mul-terms (term-list p1)
                                  (coerce-to-type (term-list p2)
                                                  (type-tag (term-list p1)))))
            (error "Polys not in same var: MUL-POLY"
                (list p1 p2))))
    (define (mul-terms L1 L2)
        (if (empty-termlist? L1)
            (the-empty-termlist (type-tag L1))
            (add-terms (mul-term-by-all-terms (first-term L1) L2)
                       (mul-terms (rest-terms L1) L2))))
    (define (mul-term-by-all-terms t1 L)
        (if (empty-termlist? L)
            (the-empty-termlist (type-tag L))
            (let ((t2 (first-term L)))
                (adjoin-term
                    (make-term (+ (order t1) (order t2))
                                (mul (coeff t1) (coeff t2)))
                    (mul-term-by-all-terms t1 (rest-terms L))))))
    (define (sub-poly p1 p2)
        (add-poly p1 (negate p2)))
    (define (poly-equals-zero? p)
        (empty-termlist? p))
    (define (negate p)
        (let ((negative-1 (make-poly (variable p)
                             ((get 'make 'sparse) (list (make-term 0 (- 1)))))))
            (mul-poly negative-1 p)))
    (define (make-a-term order coeff) (list order coeff))
    (define (term-order term) (car term))
    (define (term-coeff term) (cadr term))
    (define (empty-termlist? terms)
        (apply-generic 'empty-termlist? terms))
    (define (the-empty-termlist list-type)
        ((get 'the-empty-termlist list-type)))
    (define (first-term terms)
        (apply-generic 'first-term terms))
    (define (rest-terms terms)
        (apply-generic 'rest-terms terms))
    (define (adjoin-term term term-list)
        (apply-generic 'adjoin-term term term-list))
    (define (order term)
        (apply-generic 'order term))
    (define (coeff term)
        (apply-generic 'coeff term))
    ;; interface to rest of the system
    (install-sparce-polynomials)
    (install-dense-polynomials)
    (define (tag p) (attach-tag 'polynomial p))
    (put 'add '(polynomial polynomial)
        (lambda (p1 p2) (tag (add-poly p1 p2))))
    (put 'mul '(polynomial polynomial)
        (lambda (p1 p2) (tag (mul-poly p1 p2))))
    (put 'sub '(polynomial polynomial)
        (lambda (p1 p2) (tag (sub-poly p1 p2))))
    (put 'make 'term
        (lambda (order coeff) (attach-tag 'term (make-a-term order coeff))))
    (put 'make 'polynomial
        (lambda (var terms) (tag (make-poly var terms))))
    (put '=zero? '(polynomial) poly-equals-zero?)
    (put 'order '(term) term-order)
    (put 'coeff '(term) term-coeff)
    'done)
(define (make-term order coeff) ((get 'make 'term) order coeff))
(define (make-dense-polynomial variable term-list)
    ((get 'make 'polynomial) variable
                             ((get 'make 'dense) term-list)))
(define (make-sparse-polynomial variable term-list)
    ((get 'make 'polynomial) variable
                             ((get 'make 'sparse) term-list)))

(install-polynomial-package)


(define dense-poly (make-dense-polynomial 'x
                                          (list (make-term 5 3)
                                                (make-term 3 3)
                                                (make-term 1 7)
                                                (make-term 0 3))))
(define sparse-poly (make-sparse-polynomial 'x
                                            (list (make-term 5 3)
                                                  (make-term 3 3)
                                                  (make-term 1 7)
                                                  (make-term 0 3))))

;; (display dense-poly) (newline)
;; (display sparse-poly) (newline)

;; (display (add dense-poly dense-poly)) (newline)
;; (display (add sparse-poly sparse-poly)) (newline)

;; (display (add dense-poly sparse-poly)) (newline)
;; (display (add sparse-poly dense-poly)) (newline)

;; (display (mul dense-poly dense-poly)) (newline)
;; (display (mul dense-poly sparse-poly)) (newline)
;; (display (mul sparse-poly sparse-poly)) (newline)
;; (display (mul sparse-poly dense-poly)) (newline)
(display (sub dense-poly sparse-poly)) (newline)