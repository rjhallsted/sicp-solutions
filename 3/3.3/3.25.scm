(define (assoc key records)
    ;; (display "records: ") (display records) (newline)
    (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))

(define (make-table)
    (let ((local-table (list '*table*)))
        (define (lookup keys)
            ;; (display "keys: ") (display keys) (newline)
            (let ((record (assoc (car keys) (cdr local-table))))
                (if record
                    (if (null? (cdr keys))
                        (cdr record)
                        (((cdr record) 'lookup-proc) (cdr keys)))
                    false)))
        (define (insert! keys value)
            ;; (display "keys: ") (display keys) (newline)
            (define (insert-value key value)
                (set-cdr! local-table
                          (cons (cons key value)
                                (cdr local-table))))
            (let ((record (assoc (car keys) (cdr local-table))))
                (if record
                    (if (null? (cdr keys))
                        (set-cdr! record value)
                        (if (procedure? (cdr record))
                            (((cdr record) 'insert-proc!) (cdr keys) value)
                            (let ((new-table (make-table)))
                                (insert-value (car keys) new-table)
                                ((new-table 'insert-proc!) (cdr keys) value))))
                    (if (null? (cdr keys))
                        (insert-value (car keys) value)
                        (let ((new-table (make-table)))
                            (insert-value (car keys) new-table)
                            ((new-table 'insert-proc!) (cdr keys) value)))))
            'ok)
        (define (dispatch m)
            (cond ((eq? m 'lookup-proc) lookup)
                ((eq? m 'insert-proc!) insert!)
                (else (error "Unkown operation: TABLE" m))))
        dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

(put '(this) 5)
(display (get '(this))) (newline)
(put '(this value) 3)
(display (get '(this value))) (newline)
(put '(that) 2)
(display (get '(that))) (newline)
(display (get '(this value))) (newline)
(put '(this value is) 4)
(display (get '(this value is))) (newline)
(put '(this value is not) 'green)
(display (get '(this value is not))) (newline)
(put '(this value is this) 3)
(display (get '(this value is this))) (newline)
(display (get '(this value is not))) (newline)
(put '(this cone is) 'red)
(display (get '(this cone is))) (newline)
(put '(1 1) '1-1)
(put '(1 2) '1-2)
(define inner-table (get '(1)))

((inner-table 'insert-proc!) '(3) '1-3)

(display ((inner-table 'lookup-proc) '(1))) (newline)
(display ((inner-table 'lookup-proc) '(2))) (newline)
(display ((inner-table 'lookup-proc) '(3))) (newline)
(display (get '(1 2))) (newline)


