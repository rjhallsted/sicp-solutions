(define (assoc key records)
    (cond ((or (null? records) (not (pair? records))) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))

(define (make-table)
    (let ((local-table (list '*table*)))
        (define (lookup keys)
            (define (inner-lookup keys table)
                (let ((record (assoc (car keys) (cdr table))))
                    (if record
                        (if (null? (cdr keys))
                            (cdr record)
                            (inner-lookup (cdr keys) record))
                        false)))
            (inner-lookup keys local-table))
        (define (insert! keys value)
            (define (inner-insert! keys value table)
                (let ((record (assoc (car keys) (cdr table))))
                    (if record
                        (if (null? (cdr keys))
                            (set-cdr! record value)
                            (inner-insert! (cdr keys) value record))
                        (let ((new-record (cons (car keys) '())))
                            (set-cdr! table (cons new-record (cdr table)))
                            (if (null? (cdr keys))
                                (set-cdr! new-record value)
                                (inner-insert! (cdr keys) value new-record))))))
            (inner-insert! keys value local-table)
            'ok)
        (define (dispatch m)
            (cond ((eq? m 'lookup-proc) lookup)
                ((eq? m 'insert-proc!) insert!)
                (else (error "Unkown operation: TABLE" m))))
        dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

(put '(this value is) 4)
(display (get '(this value is))) (newline)
(put '(this value is not) 'green)
(display (get '(this value is not))) (newline)
(put '(this value is) 3)
(display (get '(this value is))) (newline)
(put '(this cone is) 'red)
(display (get '(this cone is))) (newline)