(define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '()))
        (define (set-front-ptr! item)
            (set! front-ptr item))
        (define (set-rear-ptr! item)
            (set! rear-ptr item))
        (define (dispatch m)
            (cond ((eq? m 'set-front-ptr!) set-front-ptr!)
                ((eq? m 'set-rear-ptr!) set-rear-ptr!)
                ((eq? m 'front-ptr) front-ptr)
                ((eq? m 'rear-ptr) rear-ptr)
                (else (error "Unrecognized method for MAKE-QUEUE" m))))
        dispatch))

(define (front-ptr queue) (queue 'front-ptr))
(define (rear-ptr queue) (queue 'rear-ptr))
(define (set-front-ptr! queue item)
    ((queue 'set-front-ptr!) item))
(define (set-rear-ptr! queue item)
    ((queue 'set-rear-ptr!) item))


(define (empty-queue? queue)
    (null? (front-ptr queue)))

(define (front-queue queue)
    (if (empty-queue? queue)
        (error "FRONT called with an empty queue" queue)
        (car (front-ptr queue))))
    
(define (insert-queue! queue item)
    (let ((new-pair (cons item '())))
        (cond ((empty-queue? queue)
                (set-front-ptr! queue new-pair)
                (set-rear-ptr! queue new-pair)
                queue)
            (else
                (set-cdr! (rear-ptr queue) new-pair)
                (set-rear-ptr! queue new-pair)
                queue))))

(define (delete-queue! queue)
    (cond ((empty-queue? queue)
            (error "DELETE! called with an empty queue" queue))
        (else
            (set-front-ptr! queue (cdr (front-ptr queue)))
            queue)))

(define (display-queue queue)
    (display (front-ptr queue)))

(define q2 (make-queue))
(insert-queue! q2 'a)
(display-queue q2) (newline)
(insert-queue! q2 'b)
(display-queue q2) (newline)
(delete-queue! q2)
(display-queue q2) (newline)
(delete-queue! q2)
(display-queue q2) (newline)
(insert-queue! q2 'c)
(display-queue q2) (newline)
